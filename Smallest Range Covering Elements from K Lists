PROBLEM STATEMENT:
You have k lists of sorted integers in non-decreasing order. Find the smallest range that includes at least one number from each of the k lists.

We define the range [a, b] is smaller than range [c, d] if b - a < d - c or a < c if b - a == d - c.

SOLUTION:

                                                                                      TIME COMPLEXITY: O(k logk)+ O(N log k) = O(N . logk)
                                                                                      SPACE COMPLEXITY: O(k)

class Solution {
    public int[] smallestRange(List<List<Integer>> nums) {

        PriorityQueue<Info> pq= new PriorityQueue<>(
            (a,b)->a.val-b.val
        );

        int min= Integer.MAX_VALUE, max= Integer.MIN_VALUE;

        for(int i=0; i<nums.size(); i++){                                  //O(k. log k)
            int val= nums.get(i).get(0);
            min= Math.min(min, val);
            max= Math.max(max, val);
            pq.add(new Info(val, i, 0));
        }

        int ansStart=min, ansEnd=max;
        while(!pq.isEmpty()){                                    //O(N log k)
            Info node= pq.poll();                                //O(log k)
            min=node.val;
            if(max-min < ansEnd-ansStart){
                //update ans
                ansEnd= max;
                ansStart= min;
            }
            int curRow= node.row;
            int curCol= node.col;
            if(curCol+1 < nums.get(curRow).size()){
                //update max
                max= Math.max(max, nums.get(curRow).get(curCol+1));
                pq.add(new Info(nums.get(curRow).get(curCol+1), curRow, curCol+1));             //O(log k)
            }
            else{
                break;
            }
        }
        return new int[]{ansStart, ansEnd};
    }
}
class Info{
    int val;
    int row;
    int col;
    Info(int val, int row, int col){
        this.val=val;
        this.row=row;
        this.col=col;
    }
}
