PROBLEM STATEMENT:

You are given an array of k linked-lists lists, each linked-list is sorted in ascending order.

Merge all the linked-lists into one sorted linked-list and return it.

SOLUTION:
                                                                                            TIME COMPLEXITY: O(n log k)
                                                                                            SPACE COMPLEXITY: O(k)

/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode mergeKLists(ListNode[] lists) {
        if(lists.length==0) return null;
        PriorityQueue<NodeInfo> pq= new PriorityQueue<>(
            (a,b) ->  Integer.compare(a.node.val,b.node.val)
        );
        for(int i=0; i<lists.length; i++){
            if(lists[i]!=null)    pq.add(new NodeInfo(lists[i], i));
        }

        ListNode res= new ListNode();
        ListNode temp= res;
        while(pq.size()>0){
            NodeInfo nodeInfo= pq.poll();
            ListNode node= nodeInfo.node;
            int row= nodeInfo.row;
            ListNode temp1= new ListNode(node.val);
            temp.next= temp1;
            temp= temp1;
            if(node.next!=null){
                pq.add(new NodeInfo(node.next, row));
            }

        }

        return res.next;
    }
}
class NodeInfo{
    ListNode node;
    int row;
    NodeInfo(ListNode node, int row){
        this.node= node;
        this.row= row;
    }
}
